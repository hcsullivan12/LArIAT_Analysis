////////////////////////////////////////////////////////////////////////
// Class:       MCProcessFilter
// Module Type: filter
// File:        MCProcessFilter_module.cc
//
// Generated at Fri May 17 15:32:31 2019 by Hunter Sullivan using artmod
// from cetpkgsupport v1_10_02.
//
// Description: This module selects 'elastic' looking events, namely,
//              events where primary has no charged secondaries. The 
//              attempt will be to use this event set for CNN training
//              for Elastic/Inelastic without charged daughters seperation. 
//
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

class MCProcessFilter;

class MCProcessFilter : public art::EDFilter {
public:
  explicit MCProcessFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MCProcessFilter(MCProcessFilter const &) = delete;
  MCProcessFilter(MCProcessFilter &&) = delete;
  MCProcessFilter & operator = (MCProcessFilter const &) = delete;
  MCProcessFilter & operator = (MCProcessFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  bool beginRun(art::Run & r) override;
  bool beginSubRun(art::SubRun & sr) override;
  void endJob() override;
  bool endRun(art::Run & r) override;
  bool endSubRun(art::SubRun & sr) override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void respondToCloseInputFile(art::FileBlock const & fb) override;
  void respondToCloseOutputFiles(art::FileBlock const & fb) override;
  void respondToOpenInputFile(art::FileBlock const  &fb) override;
  void respondToOpenOutputFiles(art::FileBlock const & fb) override;

private:

  // Declare member data here.

};

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Constructor
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MCProcessFilter::MCProcessFilter(fhicl::ParameterSet const & p)
// :
{
  this->reconfigure(p);
}





// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Reconfigure
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
void MCProcessFilter::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}





// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Filter
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
bool MCProcessFilter::filter(art::Event & e)
{
  
}





// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% Begin Job
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
void MCProcessFilter::beginJob()
{
  // Implementation of optional member function here.
}





// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%% End Job
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
void MCProcessFilter::endJob()
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(MCProcessFilter)
